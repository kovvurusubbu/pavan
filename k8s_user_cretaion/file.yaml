Create a Service Account for the developer in the staging namespace.

kubectl create serviceaccount developer-sa -n staging

Create a Role that grants read-only access to pods, as defined earlier:
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: staging
  name: pod-log-reader
rules:
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "watch", "list"]



Create a RoleBinding to bind the role to the service account:
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pod-logs
  namespace: staging
subjects:
- kind: ServiceAccount
  name: developer-sa
  namespace: staging
roleRef:
  kind: Role
  name: pod-log-reader
  apiGroup: rbac.authorization.k8s.io



Get the Service Account Token: You can retrieve the token for the developer's service account by running:
kubectl get serviceaccount developer-sa -n staging
kubectl -n staging get secret $(kubectl -n staging get sa developer-sa -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode



After Retrieving the Token:
The developer can then configure their kubeconfig file with the token as follows:


kubectl config set-credentials developer-sa --token=<service_account_token>
kubectl config set-context developer-context --cluster=<cluster_name> --namespace=staging --user=developer-sa
kubectl config use-context developer-context


after check kubectl get pods -n namespace
if its  work fine 
id its not work  
please follow the steps 

cat ~/.kube/config
vim  ~/.kube/config
update the user cluster:
--------------------------------
- context:
    cluster: inbox-staging-cluster   //u can update here like this ..>> gke.......-sta........-b_inbox-.......-cluster
    namespace: staging
    user: developer-sa

kubectl get pods -n staging




***********************************************************************************************************************************************8

i created new user again:-
--------------------------------------------------------
--------------------------------------------------------
// create  the  service a/c
kubectl create serviceaccount dev-sa -n staging
-------------------------------------------------
-------------------------------------------------
//create the Role Permissions,Bind the Role
--> Sample read-only-pod-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: staging
  name: read-only-pod-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-only-pod-role-binding
  namespace: staging
subjects:
- kind: ServiceAccount
  name: dev-sa
  namespace: staging
roleRef:
  kind: Role
  name: read-only-pod-role
  apiGroup: rbac.authorization.k8s.io

-------------------------------------------------
-------------------------------------------------  
// create  the  service a/c
kubectl create serviceaccount dev-sa -n staging
-------------------------------------------------
-------------------------------------------------
//create the Role Permissions,Bind the Role
--> Sample read-only-pod-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: staging
  name: read-only-pod-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-only-pod-role-binding
  namespace: staging
subjects:
- kind: ServiceAccount
  name: dev-sa
  namespace: staging
roleRef:
  kind: Role
  name: read-only-pod-role
  apiGroup: rbac.authorization.k8s.io

-------------------------------------------------
-------------------------------------------------  
// create  the  service a/c
kubectl create serviceaccount dev-sa -n staging
-------------------------------------------------
-------------------------------------------------
//create the Role Permissions,Bind the Role
--> Sample read-only-pod-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: staging
  name: read-only-pod-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-only-pod-role-binding
  namespace: staging
subjects:
- kind: ServiceAccount
  name: dev-sa
  namespace: staging
roleRef:
  kind: Role
  name: read-only-pod-role
  apiGroup: rbac.authorization.k8s.io

-------------------------------------------------
-------------------------------------------------  
kubectl get serviceaccount -n staging

kubectl get serviceaccount dev-sa -n staging

//Create a Token Using the TokenRequest AP:-
kubectl create token dev-sa -n staging

kubectl config set-credentials dev-sa --token=<generated_token>  // here past the token
kubectl config set-context developer-context --cluster=<cluster_name> --namespace=staging --user=dev-sa
kubectl config use-context developer-context

=========================================================
