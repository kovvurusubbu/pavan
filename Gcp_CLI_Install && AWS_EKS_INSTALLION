 sudo gcloud init
 1261  sudo apt update
 1262  sudo apt install apt-transport-https ca-certificates gnupg
 1263  sudo rm /usr/share/keyrings/cloud.google.gpg
 1264  sudo rm /usr/share/keyrings/cloud.google.gpg~
 1265  sudo rm /etc/apt/sources.list.d/google-cloud-sdk.list
 1266  sudo rm /usr/share/keyrings/cloud.google.gpg && sudo rm /usr/share/keyrings/cloud.google.gpg~ && sudo rm /etc/apt/sources.list.d/google-cloud-sdk.list
 1267  sudo apt-get install apt-transport-https ca-certificates gnupg && echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && sudo apt-get update && sudo apt-get install google-cloud-sdk && sudo apt-get install google-cloud-sdk-app-engine-java && sudo apt-get install google-cloud-sdk-app-engine-python && gcloud init
 1268  gcloud components install gke-gcloud-auth-plugin
 1269  sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
 1270  clear
 1271  gke-gcloud-auth-plugin --version
 1272  gcloud container clusters get-credentials gke_inbox-staging_asia-south1-b_inbox-staging-cluster
 1273  gcloud components install kubectl
 1274  sudo apt-get install kubectl
 1275  gcloud container clusters get-credentials gke_inbox-staging_asia-south1-b_inbox-staging-cluster
 1276  gcloud container clusters get-credentials inbox-staging-cluster
 1277  gcloud container clusters get-credentials inbox-staging-cluster --zone=asia-south1-b
 1278  kubectl get namespacees
 1279  kubectl get ns
 1280  kubectl get pods -staging
 1281  kubectl get pods -nstaging
 1282  sudo port install k9s
 1283  sudo apt update
 1284  sudo apt install snapd
 1285  sudo snap install k9s
 1286  k9s
 1287  kubectl get po
 1288  export KUBECONFIG=$HOME/.kube/config
 1289  k9s
 1290  sudo k9s
 1291  k9s
 1292  k9s -cluster=inbox-staging
 1293  export KUBECONFIG=$HOME/.kube/config
 1294  k9s info
 1295  vi  /home/subbu/.k9s/config.yml
 1296  sudo
 1297  clear
 1298  k9s get pods
 1299  clear
 1300  k9s
 1301  clear
 1302  which k9s
 1303  k9s
 1304  clear
 1305  k9s
 1306  clear
 1307  which k9s
 1308  history
 
i need to move  another project

kubectl config set-context QA-context --cluster=test-staging-cluster --namespace=prod --user=QA            (i have  a  user  add_name --user-QA) 
kubectl config use-context QA-context


 
 
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 
 INSTALL EKS STEPS 
 
 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                      EKS CREATION >>>>>>>>>>>>>IN AWS ..!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                       !!!! IN THIS ALL SETUP ONLY AWS CLOUD EKS...!!!!
(1) first eks ni setup chayali ?
GO TO AWS
create eks cluster >>>click   CLUSTER CREATE
There are 6 steps .
Step 1:
$Configure cluster .                      >> name , kubernates version ,, create IAM  select role and create.
                                                    chose > eks ,
                                                                  eks cluster
                                                       all next click
  
Step 2
Specify networking.                       >>   create vpc and subnet , securtyGroup    <create are not your choise >                 >> and   Next all click

Step 3
Configure logging.                        >> next all  click

Step 4
Select add-ons.                           >> next all click 
Step 5
Configure selected add-ons settings.      >> next all click

Step 6
Review and create.                        >> next all 

>>>>>>>> How to create node in EKS  >>>>>>>>> 
Go to Cluster  ....
Click .
and click                                 >>[  Compute   ]
 Add Node Group                           >> click

    Step 1,
    Configure node group                  >>  Name , Node IAM role, 
    policy name >>   {{ * AmazonEKSWorkerNodePolicy	* AmazonEC2ContainerRegistryReadOnly   * AmazonEKS_CNI_Policy    }}   ( 3 policys must and shoud )
   
    Step 2
    Set compute and scaling configuration >>  all next click

    Step 3
    Specify networking                   >>  all nect click

    Step 4
    Review and create  >>      NEXT   >> CREATE 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&7
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    AND SETUP.... LOCAL   ,, HOW TO SETUP EKS    .. SEE   ALL   STEPS...?  youtube video>> https://youtu.be/R0H1-kdeQ_c

    Then  local setup >> tack ec2 instance connect ssh 
    Then , eks setup
.......................EKS::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>

$ sudo apt -update
Installing or updating the latest version of the AWS CLI ::: neku life lo dought vastai check it online!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..   
 ( IN THIS INSTALLING AWS CLI )
$ curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
$ unzip awscliv2.zip
$ sudo ./aws/install
$ sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
$ which aws
/usr/local/bin/aws >>outupt
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
THEN ::: INSTALL KUBECTL   Installing or updating kubectl::

$ curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl
$ curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl
$ openssl sha1 -sha256 kubectl
SHA256(kubectl)= d577810dec7ceffec97479870a45ae257cb149221cf005ee3609dfbd6812c2ae   >>output
$chmod +x ./kubectl
$ mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
$ echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
$ kubectl version --short --client
$ which kubectl
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
THEN CONFIGURE AWS  
$ aws configure
AWS Access Key ID [None]: AKIAZZMWLTUNO2
AWS Secret Access Key [None]:  ly8nLp/rkn29H0IiuulIVlORg
Default region name [None]: ap-south-1
Default output format [None]: yaml or {json}

$ aws s3 ls                   >> it show aws s3 buckerts
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.>>>>>>>>>>>>>>>>>>>
AND CONNECT AWS EKS    .. HOW TO CONNECT EKS .......SEE ALL STEP FALLOW
Creating an Amazon EKS cluster ::::

$ aws eks --region ap-south-1 describe-cluster --name grafan-prometheus --query cluster.status
( aws eks --region ap-south-1 describe-cluster --name  <grafan-prometheus > --query cluster.status
   **out-put "ACTIVE"  **                                              \ " in this cluster name "\  )

$ aws eks --region  ap-south-1 update-kubeconfig --name  >grafan-prometheus<                                                                        || >> In this name clustername 
  aws eks --region ap-south-1 update-kubeconfig --name  > CLUSTERNAME <  
  
  
 aws eks --region ap-south-1 describe-cluster --name hello-world --query cluster.status
 aws eks --region  ap-south-1 update-kubeconfig --name  hello-world
                              
$ kubectl get nodes
$ kubectl get svc
$ kubectl get pods
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  END ...!
 
 
 
 
 
