sysctl -w vm.max_map_count=262144
        mkdir /opt/esdatadir
        chmod 0777 /opt/esdatadir
        chgrp 1000 /opt/esdatadir
 
docker pull docker.elastic.co/elasticsearch/elasticsearch:7.5.2
docker network create es_network

sudo docker volume create elasticsearch_data

âœ… Final Updated Command with Docker Volume:

sudo docker run --name elastic-search \
  -dit \
  --restart unless-stopped \
  --net=es_network \
  -p 9200:9200 \
  -p 9300:9300 \
  -v elasticsearch_data:/usr/share/elasticsearch/data \
  -e "bootstrap.memory_lock=true" \
  --ulimit memlock=-1:-1 \
  --ulimit nofile=65535:65535 \
  -e ES_JAVA_OPTS="-Xms1g -Xmx1g" \
  -e "discovery.type=single-node" \
  -e "xpack.security.enabled=true" \
  -e "ELASTIC_USERNAME=elastic" \
  -e "ELASTIC_PASSWORD=uoZDvA4RLmAp" \
  docker.elastic.co/elasticsearch/elasticsearch:7.5.2


=========================================================================================
ðŸ§­ Steps for Zero-Downtime (Single Node Setup)

ðŸ“¦ 1. Create a new volume (backup optional)

Create a temporary backup of your current data volume, just in case:
# Backup (optional, recommended)
sudo docker run --rm \
  -v elasticsearch_data:/from \
  -v $(pwd)/es_backup:/to \
  alpine cp -a /from /to


ðŸŸ¢ 2. Run a new container (new version) on a different port
Run upgraded Elasticsearch on different ports (e.g., 9201, 9301) and mount the same data volume:

sudo docker run --name elastic-search-new \
  -dit \
  --restart unless-stopped \
  --net=es_network \
  -p 9201:9200 \
  -p 9301:9300 \
  -v elasticsearch_data:/usr/share/elasticsearch/data \
  -e "bootstrap.memory_lock=true" \
  --ulimit memlock=-1:-1 \
  --ulimit nofile=65535:65535 \
  -e ES_JAVA_OPTS="-Xms1g -Xmx1g" \
  -e "discovery.type=single-node" \
  -e "xpack.security.enabled=true" \
  -e "ELASTIC_USERNAME=elastic" \
  -e "ELASTIC_PASSWORD=uoZDvA4RLmAp" \
  docker.elastic.co/elasticsearch/elasticsearch:7.17.18


ðŸ”„ This does a few things:
Mounts same data (volume).
Starts new version on different port.
Validates data compatibility and runtime.


ðŸ§ª 3. Test the new version
curl -u elastic:uoZDvA4RLmAp http://localhost:9201

Check logs:
docker logs -f elastic-search-new

âœ… If it works correctly, you can switch traffic.

ðŸ”„ 4. Switch Port 9200 to New Version
Stop old container:

sudo docker stop elastic-search
sudo docker rm elastic-search

Restart new container with standard ports:
sudo docker stop elastic-search-new
sudo docker rm elastic-search-new

then:
--------------------------
sudo docker run --name elastic-search \
  -dit \
  --restart unless-stopped \
  --net=es_network \
  -p 9200:9200 \
  -p 9300:9300 \
  -v elasticsearch_data:/usr/share/elasticsearch/data \
  -e "bootstrap.memory_lock=true" \
  --ulimit memlock=-1:-1 \
  --ulimit nofile=65535:65535 \
  -e ES_JAVA_OPTS="-Xms1g -Xmx1g" \
  -e "discovery.type=single-node" \
  -e "xpack.security.enabled=true" \
  -e "ELASTIC_USERNAME=elastic" \
  -e "ELASTIC_PASSWORD=uoZDvA4RLmAp" \
  docker.elastic.co/elasticsearch/elasticsearch:7.17.18

ðŸ§¹ 5. Clean Up
Remove the backup or the old image (optional):
sudo docker image prune



==================================================================
manuly..commands
-------
Elasticsearch 7 Installation & Configuration
(Ubuntu VM)
System Requirements
â€¢ OS: Ubuntu 20.04 or 22.04
â€¢ Private IP: 172.1.240.13
â€¢ Java: OpenJDK 11
â€¢ Public IP: Not used (system is private)

Step 1: System Preparation
Update system:
sudo apt update && sudo apt upgrade -y
Install Java:
sudo apt install openjdk-11-jdk -y
java -version
Step 2: Install Elasticsearch 7.17.x
Add Elastic GPG key and repository:
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key
add -
sudo sh -c 'echo "deb https://artifacts.elastic.co/packages/7.x/apt stable
main" > /etc/apt/sources.list.d/elastic-7.x.list'
sudo apt update

Install Elasticsearch:
sudo apt install elasticsearch -y
1Step 3: Configure Elasticsearch

Edit config:
sudo nano /etc/elasticsearch/elasticsearch.yml
Add the following:
network.host: 172.1.240.13
http.port: 9200
discovery.type: single-node
xpack.security.enabled: true
xpack.security.authc.api_key.enabled: true

Note: Replace 172.1.240.13 with your actual private IP if different.
Step 4: Start & Enable Elasticsearch
sudo systemctl enable elasticsearch
sudo systemctl start elasticsearch
sudo systemctl status elasticsearch
Step 5: Set Passwords for Built-in Users
Run the interactive password setup:
sudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive
You will be prompted to set passwords for:
â€¢ elastic
â€¢ kibana_system
â€¢ logstash_system
â€¢ beats_system
â€¢ apm_system
Save the password for elastic â€” it is the admin user.
2Step 6: Test Access
curl -u elastic http://172.1.240.13:9200
You should be prompted for a password and then see Elasticsearch cluster information.
Step 7: Verify Logs
View real-time logs:
sudo tail -f /var/log/elasticsearch/elasticsearch.log
View journal logs:
sudo journalctl -u elasticsearch
Optional: Secure Access (Firewall/Nginx/SSL)
If you need to expose it safely (e.g., within a VPN), consider:
â€¢ Allow only trusted IPs via firewall rules
â€¢ Use Nginx as a reverse proxy with HTTPS and basic auth
â€¢ Never bind network.host to 0.0.0.0 or public IP
Notes
â€¢ Elasticsearch runs on port 9200
â€¢ Admin user is elastic
â€¢ Data folder: /var/lib/elasticsearch/
â€¢ Config folder: /etc/elasticsearch/
â€¢ Logs folder: /var/log/elasticsearch/

-----------
sudo apt install nginx -y
sudo nano /etc/nginx/sites-available/elasticsearch
server {
    listen 80;
    server_name 171.1.240.13;
 
    location /elasticsearch/ {
        rewrite ^/elasticsearch/(.*)$ /$1 break;
        proxy_pass http://171.1.240.13:9200/;
 
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
sudo ln -s /etc/nginx/sites-available/elasticsearch /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx
 
sudo ln -sf /etc/nginx/sites-available/elasticsearch /etc/nginx/sites-enabled/elasticsearch
 
 
Create the index via Nginx proxy
curl -X PUT -u elastic 'http://172.1.240.13/elasticsearch/test' \
  -H 'Content-Type: application/json' \
  -d '{
    "settings": {
      "number_of_shards": 1,
      "number_of_replicas": 0
    }
  }'
 
 
curl -u elastic http://171.19.240.13/elasticsearch/_cat/indices?v


